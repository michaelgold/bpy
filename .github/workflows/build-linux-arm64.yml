name: Build bpy for Linux Arm64

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Blender Tag to build'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout repo
        uses: actions/checkout@v2


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Cache Blender dependencies
        uses: actions/cache@v2
        with:
          path: |
            ./lib
          key: ${{ runner.os }}-arm64-blender-deps-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-blender-deps-

      # - name: Cache Pyenv
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./pyenv
      #     key: ${{ runner.os }}-arm64-pyenv-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-arm64-pyenv-


      # - name: Get dependencies
      #   run: |
      #     echo "Building bpy for Linux with tag ${{ github.event.inputs.tag }}"
      #     sudo apt update
      #     sudo apt-get install -y build-essential git subversion cmake libx11-dev libxxf86vm-dev libxcursor-dev libxi-dev libxrandr-dev libxinerama-dev libegl-dev
      #     sudo apt-get install -y libwayland-dev wayland-protocols libxkbcommon-dev libdbus-1-dev linux-libc-dev
      #     if [ ! -d "./lib" ]; then
      #       mkdir ./lib
      #       cd ./lib
      #       svn checkout https://svn.blender.org/svnroot/bf-blender/trunk/lib/linux_x86_64_glibc_228
      #     fi

      - name: Build dependencies
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:jammy
          options: |
            --platform linux/arm64
            --volume ${{ github.workspace }}/lib:/build/lib
            --volume ${{ github.workspace }}:/wokspace
            --workdir /build
          run: |
            ls -lah /workspace
            if [ ! "$(find ./lib -mindepth 1 -print -quit)" ]; then
              # Commands to run if ./lib is empty
              export DEBIAN_FRONTEND=noninteractive

              apt update
              apt-get install -y curl sudo # Explicitly installing curl and sudo
              apt-get install -y build-essential git subversion cmake libx11-dev libxxf86vm-dev libxcursor-dev libxi-dev libxrandr-dev libxinerama-dev libegl-dev curl libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev 
              # maynbe need thsee wget llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev liblzma-dev python-openssl
              apt-get install -y libwayland-dev wayland-protocols libxkbcommon-dev libdbus-1-dev linux-libc-dev libffi-dev libgomp1 
       
              # install libraries to build deps
              apt-get install -y autoconf automake bison libtool yasm tcl ninja-build meson python3-mako patchelf
              ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
              dpkg-reconfigure --frontend noninteractive tzdata
              curl https://pyenv.run | bash
              export PATH="/root/.pyenv/bin:$PATH"
              export PYENV_ROOT="$HOME/.pyenv"
              [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"
              # Restart your shell for the changes to take effect.
              # Load pyenv-virtualenv automatically by adding
              # the following to your profile:
              eval "$(pyenv virtualenv-init -)"
              # pyenv install -v 3.10.10
              # env PYTHON_CONFIGURE_OPTS='--enable-optimizations' pyenv install -v 3.10.10
              pyenv install -v miniconda3-3.10-23.10.0-1

              pyenv global miniconda3-3.10-23.10.0-1
              echo "python global command complete: $(python --version)"
              pip install httpx==0.24.1 typer==0.9.0
              git clone --branch ${{ github.event.inputs.tag }} --depth 1 --recursive https://github.com/blender/blender.git
              cd blender

              # download deps
              python /workspace/download_deps.py ./blender/build_files/build_environment/cmake/versions.cmake ./libs

              # make deps
              # run deps install script up to 10 times (if downloads faill)
              # script_to_run="python ./build_files/build_environment/ install_linux_packages.py --all"
          

              script_to_run="make deps"
              check_directory="./build_linux/deps/"


              # Maximum number of attempts
              max_attempts=100

              # Current attempt counter
              attempt=1

              while [ $attempt -le $max_attempts ]
              do
                  echo "Attempt $attempt of $max_attempts:"
                  
                  # Run the script
                  $script_to_run
                  
                # Check the exit status of the script
                if [ $? -eq 0 ]; then
                    echo "Script executed successfully on attempt $attempt."
                    break
                else
                    echo "Script failed on attempt $attempt. Checking for zero-byte files..."

                    # Check for zero-byte files
                    for file in "$check_directory"/*; do
                        if [ -f "$file" ] && [ ! -s "$file" ]; then
                            echo "Deleting zero-byte file: $file"
                            rm "$file"
                        fi
                    done

                    echo "Retrying..."
                fi
                # Increment the attempt counter
               ((attempt++))

              done

              if [ $attempt -gt $max_attempts ]; then
                  echo "Script failed after $max_attempts attempts."
              fi
            
            fi
          shell: bash


      - name: Cache build files (for testing only)
        uses: actions/cache@v2
        with:
          path: |
            ./build_linux_bpy
          key: ${{ runner.os }}-arm64-blender-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-blender-build-

      # - name: Download Blender Python API Stubs
      #   id: download-artifact
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     workflow: generate_stubs.yml
      #     # github_token: ${{secrets.GITHUB_TOKEN}}
      #     name: blender-python-api-stubs-${{ github.event.inputs.tag }}
      #     path: ./build_linux_bpy/bin/


      # - name: Build Blender
      #   run: |
      #     cd ./blender
      #     make update
      #     make bpy
      #     # make bpy VERBOSE=1

      # - name: Install Blender
      #   run: python -c "import shutil, site; shutil.copytree('./build_linux_bpy/bin/bpy', site.getsitepackages()[0] + '/bpy')"




      # - name: Setup terminal session
      #   uses: fawazahmed0/action-debug@main
      #   with:
      #       credentials: "user:p@ss!"


      # - name: Make Wheel
      #   run: |
      #     # PYTHON3=$(which python3)
      #     # PYTHON=$(which python)
          
      #     # sudo rm $PYTHON3 
      #     # ln -s $PYTHON $PYTHON3
      #     pip install -U pip setuptools wheel
      #     python ./blender/build_files/utils/make_bpy_wheel.py ./build_linux_bpy/bin/

      # # - name: Upload Wheel as Artifact
      # #   uses: actions/upload-artifact@v2
      # #   with:
      # #     name: bpy-linux
      # #     path: |
      # #       ./build_linux_bpy/bin/*.whl

      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip ndg-httpsclient pyopenssl pyasn1
      #     python -m pip install bpystubgen requests python-dotenv typer=='0.9.0' httpx

      # - name: Publish Wheel
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: python workspace/build_blender.py publish-github  ${{ github.event.inputs.tag }} ./build_linux_bpy/bin
